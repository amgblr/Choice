import {
  useStaticPicker
} from "./chunk-6LLPUX6C.js";
import {
  useTimePickerDefaultizedProps
} from "./chunk-L54GBJ7O.js";
import {
  renderTimeViewClock
} from "./chunk-WJYRF7JD.js";
import "./chunk-QY6MVT5I.js";
import {
  validateTime
} from "./chunk-BQ54CJGA.js";
import "./chunk-ZSGOA7PU.js";
import {
  singleItemValueManager
} from "./chunk-2AHCZHOB.js";
import "./chunk-Z2WGXCMT.js";
import "./chunk-JFUQDPBE.js";
import "./chunk-DRPARXEQ.js";
import "./chunk-M6EFIZSO.js";
import "./chunk-M7KT2KOG.js";
import "./chunk-B7Z6IZXJ.js";
import "./chunk-W2IKPYOM.js";
import "./chunk-7AH2GFA3.js";
import "./chunk-KZS5NHPI.js";
import "./chunk-OYW3GWTT.js";
import "./chunk-PHNMT3NR.js";
import "./chunk-QSE4EDO6.js";
import "./chunk-XOV5MNKJ.js";
import "./chunk-L73H6NY6.js";
import "./chunk-XV4CIBSX.js";
import "./chunk-CFOQ2THW.js";
import "./chunk-ZBPYLC6T.js";
import "./chunk-D25ADEQS.js";
import "./chunk-RPCV76H6.js";
import "./chunk-TU4SCASD.js";
import "./chunk-T2RGT4ZC.js";
import "./chunk-KPCKTKIM.js";
import "./chunk-2JFW4W2U.js";
import "./chunk-CQT3HM33.js";
import "./chunk-CLBO5QBH.js";
import "./chunk-PJ34N24D.js";
import "./chunk-7R7VUSYV.js";
import "./chunk-Y4HSIQUH.js";
import "./chunk-W7WE2RJW.js";
import "./chunk-WAMLAQ76.js";
import "./chunk-6B5WPRYI.js";
import "./chunk-B4NP4KPM.js";
import "./chunk-RGL2J7LO.js";
import "./chunk-FVWB57TK.js";
import "./chunk-UYYMBUGX.js";
import "./chunk-QSF5M6MG.js";
import "./chunk-WBEJ64CX.js";
import "./chunk-FMFFUJ5P.js";
import "./chunk-3TW4MT3C.js";
import "./chunk-UAIHK6XU.js";
import "./chunk-PNJYQXZZ.js";
import "./chunk-SJUYZQ7Y.js";
import "./chunk-DEJKJ5PH.js";
import "./chunk-BI3I73UF.js";
import "./chunk-HVTZFXGY.js";
import "./chunk-VWTAT46Z.js";
import "./chunk-IKNVR6L3.js";
import "./chunk-FFQKQ7UO.js";
import "./chunk-DKFUNVSZ.js";
import {
  require_prop_types
} from "./chunk-PPLKJ7N6.js";
import "./chunk-IXNBSIST.js";
import "./chunk-V66CRQXE.js";
import "./chunk-KWUZEEQS.js";
import "./chunk-AT3RVNMG.js";
import "./chunk-WAFQIO3T.js";
import "./chunk-NGURHOVW.js";
import "./chunk-ABW2PW2F.js";
import "./chunk-VV5DYCQJ.js";
import {
  _extends,
  init_extends
} from "./chunk-WGLPVN3I.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@mui/x-date-pickers/StaticTimePicker/StaticTimePicker.js
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var StaticTimePicker = React.forwardRef(function StaticTimePicker2(inProps, ref) {
  var _defaultizedProps$dis, _defaultizedProps$amp, _defaultizedProps$slo;
  const defaultizedProps = useTimePickerDefaultizedProps(inProps, "MuiStaticTimePicker");
  const displayStaticWrapperAs = (_defaultizedProps$dis = defaultizedProps.displayStaticWrapperAs) != null ? _defaultizedProps$dis : "mobile";
  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : displayStaticWrapperAs === "desktop";
  const viewRenderers = _extends({
    hours: renderTimeViewClock,
    minutes: renderTimeViewClock,
    seconds: renderTimeViewClock
  }, defaultizedProps.viewRenderers);
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    displayStaticWrapperAs,
    ampmInClock,
    slotProps: _extends({}, defaultizedProps.slotProps, {
      toolbar: _extends({
        hidden: displayStaticWrapperAs === "desktop",
        ampmInClock
      }, (_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.toolbar)
    })
  });
  const {
    renderPicker
  } = useStaticPicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "time",
    validator: validateTime,
    ref
  });
  return renderPicker();
});
StaticTimePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * 12h/24h view for hour selection clock.
   * @default `utils.is12HourCycleInCurrentLocale()`
   */
  ampm: import_prop_types.default.bool,
  /**
   * Display ampm controls under the clock (instead of in the toolbar).
   * @default true on desktop, false on mobile
   */
  ampmInClock: import_prop_types.default.bool,
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types.default.string,
  /**
   * Overridable components.
   * @default {}
   * @deprecated Please use `slots`.
   */
  components: import_prop_types.default.object,
  /**
   * The props used for each component slot.
   * @default {}
   * @deprecated Please use `slotProps`.
   */
  componentsProps: import_prop_types.default.object,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: import_prop_types.default.any,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * Do not ignore date part when validating min/max time.
   * @default false
   */
  disableIgnoringDatePartForTimeValidation: import_prop_types.default.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * Force static wrapper inner components to be rendered in mobile or desktop mode.
   * @default "mobile"
   */
  displayStaticWrapperAs: import_prop_types.default.oneOf(["desktop", "mobile"]),
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: import_prop_types.default.object,
  /**
   * Maximal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  maxTime: import_prop_types.default.any,
  /**
   * Minimal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  minTime: import_prop_types.default.any,
  /**
   * Step over minutes.
   * @default 1
   */
  minutesStep: import_prop_types.default.number,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: import_prop_types.default.func,
  /**
   * Callback fired when component requests to be closed.
   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.
   * @deprecated Please avoid using as it will be removed in next major version.
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback fired when the error associated to the current value changes.
   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
   *
   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
   * @param {TError} error The new error describing why the current value is not valid.
   * @param {TValue} value The value associated to the error.
   */
  onError: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: import_prop_types.default.oneOf(["hours", "minutes", "seconds"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  /**
   * Disable specific clock time.
   * @param {number} clockValue The value to check.
   * @param {TimeView} view The clock type of the timeValue.
   * @returns {boolean} If `true` the time will be disabled.
   * @deprecated Consider using `shouldDisableTime`.
   */
  shouldDisableClock: import_prop_types.default.func,
  /**
   * Disable specific time.
   * @template TDate
   * @param {TDate} value The value to check.
   * @param {TimeView} view The clock type of the timeValue.
   * @returns {boolean} If `true` the time will be disabled.
   */
  shouldDisableTime: import_prop_types.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: import_prop_types.default.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: import_prop_types.default.any,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: import_prop_types.default.oneOf(["hours", "minutes", "seconds"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be the used.
   */
  viewRenderers: import_prop_types.default.shape({
    hours: import_prop_types.default.func,
    minutes: import_prop_types.default.func,
    seconds: import_prop_types.default.func
  }),
  /**
   * Available views.
   */
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
};
export {
  StaticTimePicker
};
//# sourceMappingURL=@mui_x-date-pickers_StaticTimePicker.js.map
