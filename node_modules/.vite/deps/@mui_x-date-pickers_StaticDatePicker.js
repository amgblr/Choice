import {
  useDatePickerDefaultizedProps
} from "./chunk-5PN367M7.js";
import {
  useStaticPicker
} from "./chunk-MWDZJEEG.js";
import "./chunk-ECHXHPNO.js";
import "./chunk-RAR2WXWH.js";
import {
  renderDateViewCalendar
} from "./chunk-XJXXBYCB.js";
import "./chunk-5M2A6VT5.js";
import "./chunk-VGCCNO5U.js";
import "./chunk-246VJHCD.js";
import "./chunk-ZSGOA7PU.js";
import {
  validateDate
} from "./chunk-4ETZZF2J.js";
import {
  singleItemValueManager
} from "./chunk-IZDLFL6P.js";
import "./chunk-QQ3TLES7.js";
import "./chunk-PYV2CGST.js";
import "./chunk-MW5TXYWE.js";
import "./chunk-ODZHCTYX.js";
import "./chunk-MMJ75WLZ.js";
import "./chunk-AWN72IL7.js";
import "./chunk-QLRCHJSG.js";
import "./chunk-HVNAMB3Q.js";
import "./chunk-PHNMT3NR.js";
import "./chunk-CU4REX52.js";
import "./chunk-SUDMMGFC.js";
import "./chunk-SCQXADYZ.js";
import "./chunk-A7F2WLEK.js";
import "./chunk-YTLHM6PY.js";
import "./chunk-KYSQ5NEA.js";
import "./chunk-MFQNZ57A.js";
import "./chunk-MX3H6AXC.js";
import "./chunk-IDXN46IP.js";
import "./chunk-2UN7XZLA.js";
import "./chunk-SGLQ6YDU.js";
import "./chunk-OASQQOOM.js";
import "./chunk-U6VT4UGX.js";
import "./chunk-TJ4WWSAQ.js";
import "./chunk-TZODZW4G.js";
import "./chunk-D25ADEQS.js";
import "./chunk-743XNT2Q.js";
import "./chunk-T3RBBGWN.js";
import "./chunk-T2RGT4ZC.js";
import "./chunk-KPCKTKIM.js";
import "./chunk-YISLL2O6.js";
import "./chunk-CQT3HM33.js";
import "./chunk-CLBO5QBH.js";
import "./chunk-PJ34N24D.js";
import "./chunk-7R7VUSYV.js";
import "./chunk-Y4HSIQUH.js";
import "./chunk-W7WE2RJW.js";
import "./chunk-WAMLAQ76.js";
import "./chunk-ZNHGASOO.js";
import "./chunk-B3FAT3VO.js";
import "./chunk-RGL2J7LO.js";
import "./chunk-FVWB57TK.js";
import "./chunk-UYYMBUGX.js";
import "./chunk-QSF5M6MG.js";
import "./chunk-G27UIROP.js";
import "./chunk-FMFFUJ5P.js";
import "./chunk-NA2GAQME.js";
import "./chunk-5HLNPFQG.js";
import "./chunk-PNJYQXZZ.js";
import "./chunk-SJUYZQ7Y.js";
import "./chunk-DEJKJ5PH.js";
import "./chunk-D2XZ3UZO.js";
import "./chunk-BD3KM755.js";
import "./chunk-KBJPWKHC.js";
import "./chunk-ZNJEPN5A.js";
import "./chunk-FFQKQ7UO.js";
import "./chunk-DKFUNVSZ.js";
import {
  require_prop_types
} from "./chunk-PPLKJ7N6.js";
import "./chunk-IXNBSIST.js";
import "./chunk-V66CRQXE.js";
import "./chunk-KWUZEEQS.js";
import "./chunk-AT3RVNMG.js";
import "./chunk-VSX3CCAM.js";
import "./chunk-VV5DYCQJ.js";
import {
  _extends,
  init_extends
} from "./chunk-WGLPVN3I.js";
import "./chunk-ABW2PW2F.js";
import "./chunk-WAFQIO3T.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@mui/x-date-pickers/StaticDatePicker/StaticDatePicker.js
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var StaticDatePicker = React.forwardRef(function StaticDatePicker2(inProps, ref) {
  var _defaultizedProps$dis, _defaultizedProps$yea, _defaultizedProps$slo;
  const defaultizedProps = useDatePickerDefaultizedProps(inProps, "MuiStaticDatePicker");
  const displayStaticWrapperAs = (_defaultizedProps$dis = defaultizedProps.displayStaticWrapperAs) != null ? _defaultizedProps$dis : "mobile";
  const viewRenderers = _extends({
    day: renderDateViewCalendar,
    month: renderDateViewCalendar,
    year: renderDateViewCalendar
  }, defaultizedProps.viewRenderers);
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    displayStaticWrapperAs,
    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : displayStaticWrapperAs === "mobile" ? 3 : 4,
    slotProps: _extends({}, defaultizedProps.slotProps, {
      toolbar: _extends({
        hidden: displayStaticWrapperAs === "desktop"
      }, (_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.toolbar)
    })
  });
  const {
    renderPicker
  } = useStaticPicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "date",
    validator: validateDate,
    ref
  });
  return renderPicker();
});
StaticDatePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types.default.string,
  /**
   * Overridable components.
   * @default {}
   * @deprecated Please use `slots`.
   */
  components: import_prop_types.default.object,
  /**
   * The props used for each component slot.
   * @default {}
   * @deprecated Please use `slotProps`.
   */
  componentsProps: import_prop_types.default.object,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
   * @returns {string} The name to display.
   * @default (day) => day.charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: import_prop_types.default.func,
  /**
   * Default calendar month displayed when `value` and `defaultValue` are empty.
   */
  defaultCalendarMonth: import_prop_types.default.any,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: import_prop_types.default.any,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: import_prop_types.default.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * Force static wrapper inner components to be rendered in mobile or desktop mode.
   * @default "mobile"
   */
  displayStaticWrapperAs: import_prop_types.default.oneOf(["desktop", "mobile"]),
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: import_prop_types.default.bool,
  /**
   * Calendar will show more weeks in order to match this value.
   * Put it to 6 for having fix number of week in Gregorian calendars
   * @default undefined
   */
  fixedWeekNumber: import_prop_types.default.number,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: import_prop_types.default.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: import_prop_types.default.object,
  /**
   * Maximal selectable date.
   */
  maxDate: import_prop_types.default.any,
  /**
   * Minimal selectable date.
   */
  minDate: import_prop_types.default.any,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: import_prop_types.default.oneOf([3, 4]),
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: import_prop_types.default.func,
  /**
   * Callback fired when component requests to be closed.
   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.
   * @deprecated Please avoid using as it will be removed in next major version.
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback fired when the error associated to the current value changes.
   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
   *
   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
   * @param {TError} error The new error describing why the current value is not valid.
   * @param {TValue} value The value associated to the error.
   */
  onError: import_prop_types.default.func,
  /**
   * Callback fired on month change.
   * @template TDate
   * @param {TDate} month The new month.
   */
  onMonthChange: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * Callback fired on year change.
   * @template TDate
   * @param {TDate} year The new year.
   */
  onYearChange: import_prop_types.default.func,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: import_prop_types.default.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  /**
   * Disable heavy animations.
   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span data-mui-test="loading-progress">...</span>
   */
  renderLoading: import_prop_types.default.func,
  /**
   * Disable specific date.
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: import_prop_types.default.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: import_prop_types.default.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: import_prop_types.default.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: import_prop_types.default.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: import_prop_types.default.any,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: import_prop_types.default.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be the used.
   */
  viewRenderers: import_prop_types.default.shape({
    day: import_prop_types.default.func,
    month: import_prop_types.default.func,
    year: import_prop_types.default.func
  }),
  /**
   * Available views.
   */
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: import_prop_types.default.oneOf([3, 4])
};
export {
  StaticDatePicker
};
//# sourceMappingURL=@mui_x-date-pickers_StaticDatePicker.js.map
